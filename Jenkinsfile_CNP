#!groovy

@Library("Infrastructure")

String product = "cmc"
String component = "citizen-frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'cmc-${env}':
    [
      secret('citizen-oauth-client-secret', 'OAUTH_CLIENT_SECRET'),
      secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
      secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD')
    ],
  'ccd-${env}': [
    secret('ccd-data-s2s-secret', 'DATA_STORE_S2S_KEY'),
    secret('ccd-definition-s2s-secret', 'DEFINITION_STORE_S2S_KEY'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def String generateBackendUrl(String testUrl) {
  String backendUrl = 'http://cmc-claim-store-aat.service.core-compute-aat.internal'
  String backendStart = 'claim-store-'
  if (testUrl?.trim()) {
     String tempUrl = testUrl.minus('https://')
     backendUrl = 'http://' + backendStart + tempUrl
     println('generateBackendUrl -> backendUrl ' + backendUrl)
  }
  return backendUrl
}

// Vars needed for AKS testing - keep values in sync with: charts/cmc-citizen-frontend/...
// THESE WILL BE OVERWRITTEN IN ASE DEPLOYMENTS WITH TERRAFORM OUTPUTS.TF
// THESE CAN BE PICKED UP IN INTEGRATION-TEST CODE DIRECTLY
env.IDAM_URL = 'https://idam-api.aat.platform.hmcts.net'
env.CLAIM_STORE_URL = 'http://cmc-claim-store-aat.service.core-compute-aat.internal'
env.FEATURE_ADMISSIONS = 'true'
env.FEATURE_MEDIATION = 'true'
env.FEATURE_DIRECTIONS_QUESTIONNAIRE = 'true'
env.FEATURE_TESTING_SUPPORT = 'true'
env.FEATURE_INVERSION_OF_CONTROL = 'true'
// add any others needed to selective testing...

String notificationsChannel = '#cmc-tech-notification'

withPipeline("nodejs", product, component) {

  after('build') {
    yarnBuilder.yarn('setup')
  }

  before('smoketest:preview'){
    onPR {
      log.info "PR_Test_URL -> "
      log.info env.TEST_URL
      env.CLAIM_STORE_URL = generateBackendUrl(env.TEST_URL)
      log.info "kkk ->"
    }
  }

  before('functionalTest:preview'){
    onPR {
      log.info "PR_Test_URL -> "
      log.info env.TEST_URL
      env.CLAIM_STORE_URL = generateBackendUrl(env.TEST_URL)
      log.info "kkk ->"
    }
  }

  after('test') {
    onMaster {
      yarnBuilder.yarn('tests:a11y')
    }
  }

  enableAksStagingDeployment()
  disableLegacyDeployment()
  
  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  installCharts()
}
