#!groovy

@Library("Infrastructure")

String product = "cmc"
String component = "citizen-frontend"

List<LinkedHashMap<String, Object>> secrets = [
  secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
  secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
  secret('postcode-lookup-api-key', 'POSTCODE_LOOKUP_API_KEY'),
  secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
  secret('citizen-oauth-client-secret', 'OAUTH_CLIENT_SECRET'),
  secret('cmc-s2s-secret', 'IDAM_S2S_TOTP_SECRET'),
  secret('citizen-draft-store-primary', 'DRAFT_STORE_SECRET_PRIMARY'),
  secret('citizen-draft-store-secondary', 'DRAFT_STORE_SECRET_SECONDARY'),
  secret('citizen-cookie-encryption-key', 'COOKIE_ENCRYPTION_KEY'),
  secret('staff_email', 'CONTACT_EMAIL')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars needed for AKS testing
env.IDAM_API_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'

String notificationsChannel = '#cmc-tech-notification'

withPipeline("nodejs", product, component) {
  afterCheckout {
    onMaster {
      try {
       sh """
          git fetch origin demo:demo
          git push --force origin HEAD:demo
        """
      } catch (err) {
        notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
      }
    }
  }

  after('build') {
    sh 'yarn setup'
  }

  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  enableDockerBuild()
  enableDeployToAKS()
  setVaultName('cmc')
}
