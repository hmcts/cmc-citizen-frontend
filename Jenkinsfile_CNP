#!groovy

@Library("Infrastructure")

String product = "cmc"
String component = "citizen-frontend"

def secrets = [
  'cmc-${env}':
    [
      secret('citizen-oauth-client-secret', 'OAUTH_CLIENT_SECRET'),
      secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
      secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD')
    ],
  'rpe-ft-api-${env}' :
    [
      secret('admin-username-test', 'ADMIN_USERNAME_TEST'),
      secret('admin-password-test', 'ADMIN_PASSWORD_TEST'),
      secret('editor-username-test', 'EDITOR_USERNAME_TEST'),
      secret('editor-password-test', 'EDITOR_PASSWORD_TEST')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars needed for AKS testing - keep values in sync with: /src/kubernetes/deployment.template.yaml
// THESE WILL BE OVERWRITTEN IN ASE DEPLOYMENTS WITH TERRAFORM OUTPUTS.TF
// THESE CAN BE PICKED UP IN INTEGRATION-TEST CODE DIRECTLY
env.IDAM_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.FEATURE_ADMISSIONS = 'true'
env.FEATURE_TESTING_SUPPORT = 'true'
// add any others needed to selective testing...

String notificationsChannel = '#cmc-tech-notification'

withPipeline("nodejs", product, component) {
  after('checkout') {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', passwordVariable: 'BEARER_TOKEN', usernameVariable: 'USERNAME')]) {
        try {
          def url = sh(returnStdout: true, script: 'git config remote.origin.url').replace('github.com', '${BEARER_TOKEN}@github.com')
          sh('git remote set-url origin ' + url)
          sh('git fetch origin demo:demo')
          sh('git push --force origin HEAD:demo')
        } catch (err) {
          notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
        }
      }
    }
  }

  after('build') {
    sh 'yarn setup'
  }

  before('smoketest:aks') {
    // required because we use a local AKS instance of claim-store for limiting bulk print requests
    def aksServiceUrl = env.TEST_URL
    env.CLAIM_STORE_URL = aksServiceUrl.replaceAll('http://', 'http://claim-store-')
    println "Using CLAIM_STORE_URL: " + env.CLAIM_STORE_URL
  }

  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  enableDockerBuild()
  installCharts()
}
