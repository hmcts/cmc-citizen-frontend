#!groovy

@Library("Infrastructure@cmc-increase-functional-timeout-to-80")

String product = "cmc"
String component = "citizen-frontend"
String notificationsChannel = '#cmc-tech-notification'

List<LinkedHashMap<String, Object>> secrets = [
  //for smoke tests
  secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
  secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
  secret('citizen-oauth-client-secret', 'OAUTH_CLIENT_SECRET'),
]

// Vars needed for AKS testing - keep values in sync with: /src/kubernetes/deployment.template.yaml
// THESE WILL BE OVERWRITTEN IN ASE DEPLOYMENTS WITH TERRAFORM OUTPUTS.TF
// THESE CAN BE PICKED UP IN INTEGRATION-TEST CODE DIRECTLY
env.IDAM_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.CLAIM_STORE_URL = 'http://cmc-claim-store-aat.service.core-compute-aat.internal'
env.FEATURE_ADMISSIONS = 'true'
env.FEATURE_TESTING_SUPPORT = 'true'
// add any others needed to selective testing...



withPipeline("nodejs", product, component) {
  afterCheckout {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', passwordVariable: 'BEARER_TOKEN', usernameVariable: 'USERNAME')]) {
        try {
          def url = sh(returnStdout: true, script: 'git config remote.origin.url').replace('github.com', '${BEARER_TOKEN}@github.com')
          sh('git remote set-url origin ' + url)
          sh('git fetch origin demo:demo')
          sh('git push --force origin HEAD:demo')
        } catch (err) {
          notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
        }
      }
    }
  }

  after('build') {
    sh 'yarn setup'
  }

  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  enableDockerBuild()
  installCharts()
  setVaultName('cmc')
}
