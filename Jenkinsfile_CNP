#!groovy

@Library("Infrastructure@cmc-features")

String product = "cmc"
String component = "citizen-frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'cmc-${env}':
    [
      secret('citizen-oauth-client-secret', 'OAUTH_CLIENT_SECRET'),
      secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
      secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD')
    ],
  // below is just for CCD in AKS - to be cleaned up when CCD Helm chart is updated to use flexvolume for secrets
  's2s-${env}': [
    secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
    secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
    secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
    secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
    secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars needed for AKS testing - keep values in sync with: /src/kubernetes/deployment.template.yaml
// THESE WILL BE OVERWRITTEN IN ASE DEPLOYMENTS WITH TERRAFORM OUTPUTS.TF
// THESE CAN BE PICKED UP IN INTEGRATION-TEST CODE DIRECTLY
env.IDAM_URL = 'https://idam-api.aat.platform.hmcts.net'
env.CLAIM_STORE_URL = 'http://cmc-claim-store-aat.service.core-compute-aat.internal'
env.FEATURE_ADMISSIONS = 'true'
env.FEATURE_MEDIATION = 'true'
env.FEATURE_DIRECTIONS_QUESTIONNAIRE = 'true'
env.FEATURE_TESTING_SUPPORT = 'true'
env.FEATURE_INVERSION_OF_CONTROL = 'true'
// add any others needed to selective testing...

String notificationsChannel = '#cmc-tech-notification'

withPipeline("nodejs", product, component) {
//  after('checkout') {
//    onMaster {
//      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', passwordVariable: 'BEARER_TOKEN', usernameVariable: 'USERNAME')]) {
//        try {
//          def url = sh(returnStdout: true, script: 'git config remote.origin.url').replace('github.com', '${BEARER_TOKEN}@github.com')
//          sh('git remote set-url origin ' + url)
//          sh('git fetch origin demo:demo')
//          sh('git push --force origin HEAD:demo')
//        } catch (err) {
//          notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
//        }
//      }
//    }
//  }

  after('build') {
    yarnBuilder.yarn('setup')
  }

  after('test') {
    onMaster {
      yarnBuilder.yarn('tests:a11y')
    }
  }

  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  installCharts()
}
