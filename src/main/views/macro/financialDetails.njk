{% from "table.njk" import tableStart, tableEnd %}

{% macro heading(label) %}
  <h3 class="heading-small form-group-related">{{ t(label) }}</h3>
{% endmacro %}

{% macro row(label, value, bottomBorder = true) %}
  <div class="{% if bottomBorder %}bottom-border{% else %}no-bottom-border{% endif %}">
    <div class="column-one-half {% if not label %}if-empty{% endif %}">
      <span>{{ t( label ) }}</span>
    </div>
    <div class="column-one-half {% if not value %}if-empty{% endif %}">
      <span>{{ value }}</span>
    </div>
  </div>
{% endmacro %}

{% macro employmentStatus(statementOfMeans) %}
  {% if statementOfMeans.employment %}
    {% set status = 'Employed' if statementOfMeans.employment.employers %}
    {% if statementOfMeans.employment.selfEmployment %}
      {% if status %}
        {% set status = status + ' and ' %}
      {% endif %}
      {% set status = status + ' Self-employed ' %}
    {% endif %}
    {{ row(label = 'Type of job', value = status) }}
  {% else %}
    {% if statementOfMeans.unemployment.unemployed %}
      {% set years = statementOfMeans.unemployment.unemployed.numberOfYears %}
      {% set months = statementOfMeans.unemployment.unemployed.numberOfMonths %}

      {% set status = 'Unemployed' %}
      {% if years or months %}
        {% set status = status + ' for ' %}
        {% if years %}
          {% set status = status + singularOrPlural(years, 'year') %}
        {% endif %}
        {% if months %}
          {% set status = status + singularOrPlural(months, 'month') %}
        {% endif %}
      {% endif %}

      {{ row(label = 'Type of job', value = status) }}
    {% elseif statementOfMeans.unemployment.retired %}
      {{ row(label = 'Type of job', value = 'Retired') }}
    {% else %}
      {{ row(label = 'Type of job', value = statementOfMeans.unemployment.other) }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro financialDetailsTable(label, statementOfMeans) %}
  <details>
    <summary>{{ t(label) }}</summary>
    <div class="panel">
      {{ heading('Bank and savings accounts') }}

      {% for account in statementOfMeans.bankAccounts %}
        {% if statementOfMeans.bankAccounts.length === 1 %}
          {{ row(label = 'Type of account', value = account.type | renderBankAccountType, bottomBorder = false) }}
        {% else %}
          {{ row(label = loop.index0 + 1 + '. Type of account', value = account.type | renderBankAccountType, bottomBorder = false) }}
        {% endif %}
        {{ row(label = 'Balance', value = account.balance | numeral, bottomBorder = false) }}
        {{ row(label = 'Joint account', value = account.joint | renderYesNo, bottomBorder = loop.index0 === statementOfMeans.bankAccounts.length - 1) }}
      {% endfor %}
      {{ row(label = 'Where are you living?	', value = statementOfMeans.residence.type | renderResidenceType) }}

      {{ heading('Children') }}

      {{ row(label = 'Do any children live with them?', value = (statementOfMeans.dependant.children !== undefined) | renderYesNo, bottomBorder = not statementOfMeans.dependant.children) }}
      {% if statementOfMeans.dependant.children %}
        {% for child in statementOfMeans.dependant.children %}
          {{ row(label = 'How many are aged ' + (child.ageGroupType | renderAgeGroupType) + '?', value = child.numberOfChildren | default('0'), bottomBorder = loop.index0 === statementOfMeans.dependant.children.length - 1) }}
          {% if child.ageGroupType === 'BETWEEN_16_AND_19' and child.numberOfChildren > 0 %}
            {{ row(label = 'How many aged ' + (child.ageGroupType | renderAgeGroupType) + ' are in full-time education or training?', value = child.numberOfChildrenLivingWithYou | default('0')) }}
          {% endif %}
        {% endfor %}
      {% endif %}

      {{ heading('Maintenance') }}

      {{ row(label = 'Do they or their partner pay maintenance for any children?', value = (statementOfMeans.dependant.numberOfMaintainedChildren > 0) | renderYesNo, bottomBorder = not statementOfMeans.dependant.numberOfMaintainedChildren > 0) }}
      {% if statementOfMeans.dependant.numberOfMaintainedChildren > 0 %}
        {{ row(label = 'Number of children', value = statementOfMeans.dependant.numberOfMaintainedChildren) }}
      {% endif %}

      {{ heading('Financial support') }}

      {{ row(label = 'Do they support anyone else financially?', value = (statementOfMeans.dependant.otherDependants !== undefined) | renderYesNo, bottomBorder = not statementOfMeans.dependant.otherDependants) }}
      {% if statementOfMeans.dependant.otherDependants %}
        {{ row(label = 'Number of people', value = statementOfMeans.dependant.otherDependants.numberOfPeople, bottomBorder = false) }}
        {{ row(label = 'Give details', value = statementOfMeans.dependant.otherDependants.details) }}
      {% endif %}

      {{ heading('Employment details') }}

      {{ row(label = 'Do they have a job?', value = (statementOfMeans.employment.employers.length > 0) | renderYesNo, bottomBorder = false) }}
      {{ employmentStatus(statementOfMeans) }}
      {% if statementOfMeans.employment.employers.length > 0 %}
        {% for employer in statementOfMeans.employment.employers %}
          {{ row(label = 'Employer name', value = employer.name, bottomBorder = false) }}
          {{ row(label = 'Job title', value = employer.jobTitle, bottomBorder = loop.index0 === statementOfMeans.employment.employers.length - 1) }}
        {% endfor %}
      {% endif %}

      {{ heading('Self-employment details') }}

      {% if statementOfMeans.employment.selfEmployment %}
        {{ row(label = 'Job title', value = statementOfMeans.employment.selfEmployment.jobTitle, bottomBorder = false) }}
        {{ row(label = 'Annual turnover', value = statementOfMeans.employment.selfEmployment.annualTurnover | numeral, bottomBorder = not statementOfMeans.employment.selfEmployment.onTaxPayments) }}
        {{ row(label = 'Are you behind on tax payments?', value = (statementOfMeans.employment.selfEmployment.onTaxPayments !== undefined) | renderYesNo, bottomBorder = false) }}
        {{ row(label = 'Amount they owe?', value = statementOfMeans.employment.selfEmployment.onTaxPayments.amountYouOwe | numeral, bottomBorder = false) }}
        {{ row(label = 'Reason', value = statementOfMeans.employment.selfEmployment.onTaxPayments.reason) }}
      {% endif %}

      {{ heading('Monthly income') }}

      {% for income in statementOfMeans.incomes %}
        {{ row(label = income.type | renderIncomeType | capitalize, value = income.amountReceived | numeral, bottomBorder = loop.index0 === statementOfMeans.incomes.length - 1) }}
      {% endfor %}

      {{ heading('Monthly expenses') }}

      {% for expense in statementOfMeans.expenses %}
        {{ row(label = expense.type | renderExpenseType | capitalize, value = expense.amountPaid | numeral, bottomBorder = loop.index0 === statementOfMeans.incomes.length - 1) }}
      {% endfor %}

      {{ heading('Debts') }}

      {{ row(label = 'Do you have any debts?', value = (statementOfMeans.debts !== undefined) | renderYesNo, bottomBorder = not statementOfMeans.debts) }}
      {% for debtRow in statementOfMeans.debts %}
        {% if statementOfMeans.debts.length === 1 %}
          {{ row(label = 'Debt' , value = debtRow.description, bottomBorder = false) }}
        {% else %}
          {{ row(label = loop.index0 + 1 + '. Debt' , value = debtRow.description, bottomBorder = false) }}
        {% endif %}
        {{ row(label = 'Total owed', value = debtRow.totalOwed | numeral, bottomBorder = false) }}
        {{ row(label = 'Monthly Payments', value = debtRow.monthlyPayments | numeral, bottomBorder = loop.index0 === statementOfMeans.debts.length - 1) }}
      {% endfor %}

      {{ heading('Court orders') }}

      {{ row(label = 'Has a court ordered you to pay anyone else?', value = (statementOfMeans.courtOrders !== undefined) | renderYesNo, bottomBorder = not statementOfMeans.courtOrders) }}
      {% for courtOrder in statementOfMeans.courtOrders %}
        {{ row(label = 'Claim number', value = courtOrder.claimNumber, bottomBorder = false) }}
        {{ row(label = 'Amount you owe', value = courtOrder.amountOwed | numeral, bottomBorder = loop.index0 === statementOfMeans.courtOrders.length - 1) }}
      {% endfor %}
    </div>
  </details>
{% endmacro %}
