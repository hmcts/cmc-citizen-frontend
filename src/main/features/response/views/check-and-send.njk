{% extends "layout.njk" %}

{% from "table.njk" import tableStart, tableEnd, row %}
{% from "form.njk" import csrfProtection, submitButton, errorSummary %}
{% from "statementOfTruth.njk" import statementOfTruth %}
{% from "party/details.njk" import partyDetailsSummaryFragment %}
{% from "timelineCheckAndSend.njk" import timelineCheckAndSend %}
{% from "evidenceCheckAndSend.njk" import evidenceCheckAndSend %}

{% set heading = 'Check your answers before submitting your response' %}

{% block content %}
  <form novalidate method="post">
    {{ csrfProtection(csrf) }}

    {{ tableStart('yourDetails', 'Your details') }}
    {{
      partyDetailsSummaryFragment(
        partyDetails = draft.defendantDetails.partyDetails,
        changeLinks = {
          contactPerson: paths.defendantYourDetailsPage.evaluateUri({ externalId: claim.externalId }),
          address: paths.defendantYourDetailsPage.evaluateUri({ externalId: claim.externalId }),
          dateOfBirth: paths.defendantDateOfBirthPage.evaluateUri({ externalId: claim.externalId })
        }
      )
    }}
    {{ row(label = 'Contact number (optional)', value = draft.defendantDetails.mobilePhone.number, changeLink = paths.defendantMobilePage.evaluateUri({ externalId: claim.externalId }), bold = true) }}

    {{ tableEnd() }}

    {{ tableStart('moneyOwed', 'Your response to the claim') }}

    {{ row(label = 'Do you owe the money claimed?', value = t(draft.response.type.displayValue) | capitalize, changeLink = paths.responseTypePage.evaluateUri({ externalId: claim.externalId }), bold = true) }}

    {% if draft.response.type === ResponseType.PART_ADMISSION %}
      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.PAID_WHAT_BELIEVED_WAS_OWED %}
        {% set rejectPartOption = 'I’ve paid what I believe I owe' %}
      {% endif %}

      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.AMOUNT_TOO_HIGH %}
        {% set rejectPartOption = 'The claim amount is too much' %}
      {% endif %}

      {{ row(label = 'Why are you rejecting part of this claim?', value = t(rejectPartOption), changeLink = paths.defenceRejectPartOfClaimPage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
    {% endif %}

    {% if draft.response.type === ResponseType.DEFENCE %}
      {% if draft.rejectAllOfClaim.option === RejectAllOfClaimOption.ALREADY_PAID %}
        {% set rejectAllOption = 'I’ve already paid the claim in full' %}
      {% endif %}

      {% if draft.rejectAllOfClaim.option === RejectAllOfClaimOption.DISPUTE %}
        {% set rejectAllOption = 'I dispute the claim' %}
      {% endif %}

      {% if draft.rejectAllOfClaim.option === RejectAllOfClaimOption.COUNTER_CLAIM %}
        {% set rejectAllOption = 'Defend now and also make a counterclaim' %}
      {% endif %}

      {{ row(label = 'Why do you reject all of this claim?', value = rejectAllOption, changeLink = paths.defenceRejectAllOfClaimPage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
    {% endif %}

    {{ tableEnd() }}

    {% if statementOfMeansIsApplicable %}
      {% include "./statement-of-means/check-and-send.njk" %}
    {% endif %}

    {% if draft.isResponseRejectedFullyWithAmountClaimedPaid() %}
      {{ tableStart('yourResponse', 'Your response') }}
        {{ row(label = 'When did you pay this amount?', value = draft.whenDidYouPay.date.toMoment() | date, changeLink = paths.whenDidYouPay.evaluateUri({ externalId: claim.externalId }), bold = true) }}
        {{ row(label = 'How did you pay the amount claimed?', value = draft.whenDidYouPay.text, changeLink = paths.whenDidYouPay.evaluateUri({ externalId: claim.externalId }), bold = true) }}
      {{ tableEnd() }}
    {% endif %}

    {% if draft.response.type === ResponseType.PART_ADMISSION and featureToggles.partialAdmission %}

      {{ tableStart('yourResponse', 'Your response') }}

      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.AMOUNT_TOO_HIGH %}
        {{ row(label = 'How much money do you believe you owe?', value = draft.howMuchOwed.amount | numeral, changeLink = paths.defendantHowMuchOwed.evaluateUri({ externalId: claim.externalId }), bold = true) }}
        {{ row(label = 'Why this is what you owe?', value = draft.howMuchOwed.text, changeLink = paths.defendantHowMuchOwed.evaluateUri({ externalId: claim.externalId }), bold = true) }}
      {% endif %}

      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.PAID_WHAT_BELIEVED_WAS_OWED %}
        {{ row(label = 'How much have you paid the claimant?', value = draft.howMuchIsPaid.amount | numeral, changeLink = paths.defendantHowMuchPaid.evaluateUri({ externalId: claim.externalId }), bold = true) }}
        {{ row(label = 'When did you pay this amount?', value = draft.howMuchIsPaid.date.toMoment() | date, changeLink = paths.defendantHowMuchPaid.evaluateUri({ externalId: claim.externalId }), bold = true) }}
        {{ row(label = 'Explain why you don’t owe the full amount', value = draft.howMuchIsPaid.text, changeLink = paths.defendantHowMuchPaid.evaluateUri({ externalId: claim.externalId }), bold = true) }}
      {% endif %}

      {{
        timelineCheckAndSend(
          header = 'Timeline of what happened (optional)',
          timeline = draft.timeline.getPopulatedRowsOnly(),
          url = paths.timelinePage.evaluateUri({ externalId: claim.externalId })
        )
      }}
      {{
        evidenceCheckAndSend(
          header = 'Your evidence (optional)',
          evidence = draft.evidence.getPopulatedRowsOnly(),
          url = paths.evidencePage.evaluateUri({ externalId: claim.externalId })
        )
      }}

      {% if draft.isResponseRejectedPartially() %}
        {% if draft.impactOfDispute.text and draft.impactOfDispute.text.trim() %}
          {% set impactOfDisputeText = draft.impactOfDispute.text %}
        {% else %}
          {% set impactOfDisputeText = '-' %}
        {% endif %}
        {{ row(label = 'How this dispute has affected you (optional)', value = impactOfDisputeText, changeLink = paths.impactOfDisputePage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
      {% endif %}
      {{ tableEnd() }}

    {% endif %}

    {% if draft.isResponseRejectedFullyWithDispute() %}
      {{ tableStart('yourDefence', 'Response details') }}
      {{ row(label = 'Why you disagree with the claim', value = draft.defence.text, changeLink = paths.defencePage.evaluateUri({ externalId: claim.externalId }), bold = true) }}

      {{
        timelineCheckAndSend(
          header = 'Timeline of what happened (optional)',
          timeline = draft.timeline.getPopulatedRowsOnly(),
          url = paths.timelinePage.evaluateUri({ externalId: claim.externalId })
        )
      }}
      {{ row(label = 'Comments about their timeline (optional)', value = draft.timeline.comment | default(''), bold = true) }}

      {{
        evidenceCheckAndSend(
          header = 'Your evidence (optional)',
          evidence = draft.evidence.getPopulatedRowsOnly(),
          url = paths.evidencePage.evaluateUri({ externalId: claim.externalId })
        )
      }}
      {{ row(label = 'Comments about their evidence (optional)', value = draft.evidence.comment | default(''), bold = true) }}
      {{ tableEnd() }}
    {% endif %}

    {% if draft.isResponseFullyAdmitted() %}
      {{ tableStart('whenWillYouPay', 'When will you pay') }}
        {{ row(label = 'When will you pay', value = t(draft.fullAdmission.defendantPaymentOption.option.displayValueFor(draft.response.type)) | capitalize, changeLink = paths.defencePaymentOptionsPage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
        {% if draft.fullAdmission.defendantPaymentOption.isOfType(DefendantPaymentType.BY_SET_DATE) %}
          {{ row(label = 'When you’ll pay the amount', value = draft.fullAdmission.payBySetDate.paymentDate.date.toMoment() | date, changeLink = payBySetDatePaths.paymentDatePage.evaluateUri({ externalId: claim.externalId }), bottomBorder = (not draft.fullAdmission.payBySetDate.hasExplanation()), bold = true) }}
          {% if draft.fullAdmission.payBySetDate.hasExplanation() %}
            {{ row(label = 'Explain why you can’t pay the full amount now', value = draft.fullAdmission.payBySetDate.explanation.text, changeLink = payBySetDatePaths.explanationPage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
          {% endif %}
        {% endif %}
        {% if draft.fullAdmission.defendantPaymentOption.isOfType(DefendantPaymentType.INSTALMENTS) %}
          {{ row(label = 'Regular payments of', value = draft.fullAdmission.defendantPaymentPlan.instalmentAmount | numeral, changeLink = paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId }), bold = true, bottomBorder = false) }}
          {{ row(label = 'Frequency of payments', value = t(draft.fullAdmission.defendantPaymentPlan.paymentSchedule.displayValue), changeLink = paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId }), bold = true, bottomBorder = false) }}
          {{ row(label = 'Make the first payment on', value = draft.fullAdmission.defendantPaymentPlan.firstPaymentDate.toMoment() | date, changeLink = paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId }), bold = true, bottomBorder = false) }}
          {{ row(label = 'Explain why you can’t pay the full amount now', value = draft.fullAdmission.defendantPaymentPlan.text, changeLink = paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
        {% endif %}
      {{ tableEnd() }}
    {% endif %}

    {% if draft.isResponseRejectedFullyWithDispute() %}
      {{ tableStart('freeMediation', 'Free mediation') }}
      {{ row(label = 'Free mediation', value = t(draft.freeMediation.option) | capitalize, changeLink = paths.freeMediationPage.evaluateUri({ externalId: claim.externalId }), bold = true) }}
      {{ tableEnd() }}
    {% endif %}

    <div class="column-two-thirds">
      <div class="form-group">
        {{
          statementOfTruth(
            form,
            statementOfTruthType = 'response',
            label = 'I believe that the facts stated in this response are true.',
            isQualified = (signatureType === SignatureType.QUALIFIED)
          )
        }}

        {{ submitButton('Submit response') }}

        <input type="hidden" name="type" value="{{ form.model.type }}">
      </div>
    </div>
  </form>
{% endblock %}
