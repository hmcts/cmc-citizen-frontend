{% extends "layout.njk" %}

{% from "table.njk" import tableStart, tableEnd, row, rowWithMultipleValue %}
{% from "form.njk" import csrfProtection, submitButton, errorSummary %}
{% from "statement-of-truth.njk" import statementOfTruth %}
{% from "party/details.njk" import partyDetailsSummaryFragment %}

{% set title = t('Money claim') %}
{% set heading = t('Check your answers before submitting your response') %}

{% block content %}
  <form novalidate method="post">
    {{ csrfProtection(csrf) }}

    {{ tableStart('yourDetails', 'Your details') }}
    {{
      partyDetailsSummaryFragment(
        partyDetails = draft.defendantDetails.partyDetails,
        changeLinks = {
          contactPerson: paths.defendantYourDetailsPage.evaluateUri({ externalId: claim.externalId }),
          address: paths.defendantYourDetailsPage.evaluateUri({ externalId: claim.externalId }),
          dateOfBirth: paths.defendantDateOfBirthPage.evaluateUri({ externalId: claim.externalId })
        }
      )
    }}
    {{ row('Phone:', draft.defendantDetails.mobilePhone.number, paths.defendantMobilePage.evaluateUri({ externalId: claim.externalId })) }}

    {{ tableEnd() }}

    {{ tableStart('moneyOwed', 'Do you owe the money claimed?') }}

    {{ row('Do you owe the money claimed?', t(draft.response.type.displayValue) | capitalize, paths.responseTypePage.evaluateUri({ externalId: claim.externalId })) }}

    {% if draft.response.type === ResponseType.OWE_SOME_PAID_NONE %}
      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.PAID_WHAT_BELIEVED_WAS_OWED %}
        {% set rejectPartOption = 'I’ve paid what I believe I owe' %}
      {% endif %}

      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.AMOUNT_TOO_HIGH %}
        {% set rejectPartOption = 'The claim amount is too much' %}
      {% endif %}

      {{ row('Why are you rejecting part of this claim?', t(rejectPartOption), paths.defenceRejectPartOfClaimPage.evaluateUri({ externalId: claim.externalId })) }}
    {% endif %}

    {% if draft.response.type === ResponseType.OWE_NONE %}
      {% if draft.rejectAllOfClaim.option === RejectAllOfClaimOption.ALREADY_PAID %}
        {% set rejectAllOption = 'I’ve already paid the claim in full' %}
      {% endif %}

      {% if draft.rejectAllOfClaim.option === RejectAllOfClaimOption.DISPUTE %}
        {% set rejectAllOption = 'I dispute the claim' %}
      {% endif %}

      {% if draft.rejectAllOfClaim.option === RejectAllOfClaimOption.COUNTER_CLAIM %}
        {% set rejectAllOption = 'Defend now and also make a counterclaim' %}
      {% endif %}

      {{ row('Why do you reject all of this claim?', t(rejectAllOption), paths.defenceRejectAllOfClaimPage.evaluateUri({ externalId: claim.externalId })) }}
    {% endif %}

    {{ tableEnd() }}

    {% if statementOfMeansIsApplicable %}
      {{ tableStart('statementOfMeans', 'Your financial details') }}
      {{ row('Where are you living?	', draft.statementOfMeans.residence.residenceType, statementOfMeansPaths.residencePage.evaluateUri({ externalId: claim.externalId })) }}

      {{ row('Children', '', statementOfMeansPaths.dependantsPage.evaluateUri({ externalId: claim.externalId }), false) }}
      {{ row('Do any children live with you?', 'Yes' if draft.statementOfMeans.dependants.hasAnyChildren else 'No', '', false) }}

      {% if draft.statementOfMeans.dependants.hasAnyChildren %}
        {{ row('16 to 19', draft.statementOfMeans.dependants.numberOfChildren.between16and19, '') }}

        {% if draft.statementOfMeans.education %}
          {{ row('Number of children aged 16 to 19 full-time education or training', draft.statementOfMeans.education.value, statementOfMeansPaths.educationPage.evaluateUri({ externalId: claim.externalId })) }}
        {% endif %}
      {% endif %}

      {{ row('Maintenance', '', statementOfMeansPaths.maintenancePage.evaluateUri({ externalId: claim.externalId }), false) }}
      {{ row('Do you or your partner pay maintenance for any children?', 'Yes' if draft.statementOfMeans.maintenance.option else 'No', '', false) }}

      {% if draft.statementOfMeans.maintenance.option %}
        {{ row('Number of children', draft.statementOfMeans.maintenance.value, '') }}
      {% endif %}

      {{ row('Employment', '', statementOfMeansPaths.employmentPage.evaluateUri({ externalId: claim.externalId }), false) }}
      {{ row('Are you currently working?', 'Yes' if draft.statementOfMeans.employment.isCurrentlyEmployed else 'No', '', false) }}

      {% if draft.statementOfMeans.employment.isCurrentlyEmployed %}
        {% set employmentStatus = 'Employed' if draft.statementOfMeans.employment.employed %}
        {% if draft.statementOfMeans.employment.selfEmployed %}
          {% if employmentStatus %}
            {% set employmentStatus = employmentStatus + ' and ' %}
          {% endif %}
          {% set employmentStatus = employmentStatus + ' Self-employed ' %}
        {% endif %}
        {{ row('Employment status', employmentStatus, '') }}
      {% endif %}

      {% if draft.statementOfMeans.employment.employed %}
        {{ row('Why employs you?', '', statementOfMeansPaths.employersPage.evaluateUri({ externalId: claim.externalId }), false) }}
        {% set indexOfLastRow = draft.statementOfMeans.employers.rows.length - 1 %}
        {% for employer in draft.statementOfMeans.employers.rows %}
          {{ row('Employer name', employer.employerName, '', false ) }}
          {{ row('Job title', employer.jobTitle, '', loop.index0 === indexOfLastRow ) }}
        {% endfor %}
      {% endif %}

      {% if draft.statementOfMeans.employment.selfEmployed %}
        {{ row('What are you self-employed as?', '', statementOfMeansPaths.selfEmployedPage.evaluateUri({ externalId: claim.externalId }), false) }}
        {{ row('Job title', draft.statementOfMeans.selfEmployed.jobTitle, '', false ) }}
        {{ row('Annual turnover', draft.statementOfMeans.selfEmployed.annualTurnover | numeral, '', not draft.statementOfMeans.selfEmployed.areYouBehindOnTax ) }}
        {% if draft.statementOfMeans.selfEmployed.areYouBehindOnTax %}
          {{ row('Are you behind on tax', 'Yes' if draft.statementOfMeans.selfEmployed.areYouBehindOnTax else 'No', '', false ) }}
          {{ row('Amount you owe?', draft.statementOfMeans.selfEmployed.amountYouOwe | numeral, '', false ) }}
          {{ row('Reason', draft.statementOfMeans.selfEmployed.reason) }}
        {% endif %}
      {% endif %}

      {{ row('Bank accounts and savings', '', statementOfMeansPaths.bankAccountsPage.evaluateUri({ externalId: claim.externalId }), false) }}
      {% set indexOfLastRow = draft.statementOfMeans.bankAccounts.getPopulatedRowsOnly().length - 1 %}

      {% for account in draft.statementOfMeans.bankAccounts.getPopulatedRowsOnly() %}
        {{ row('Type of account', account.typeOfAccount.displayValue, '', false ) }}
        {{ row('Balance', account.balance | numeral, '', false) }}
        {{ row('Is joint', 'Yes' if account.isJoint else 'No', '', loop.index0 === indexOfLastRow ) }}
      {% endfor %}

      {{ tableEnd() }}
    {% endif %}

    {% if draft.response.type === ResponseType.OWE_SOME_PAID_NONE and featureToggles.partialAdmission %}

      {{ tableStart('yourResponse', 'Your response') }}

      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.AMOUNT_TOO_HIGH %}
        {{ row('How much money do you believe you owe?', draft.howMuchOwed.amount | numeral, paths.defendantHowMuchOwed.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('Why this is what you owe?', draft.howMuchOwed.text, paths.defendantHowMuchOwed.evaluateUri({ externalId: claim.externalId })) }}
      {% endif %}

      {% if draft.rejectPartOfClaim.option === RejectPartOfClaimOption.PAID_WHAT_BELIEVED_WAS_OWED %}
        {{ row('How much have you paid the claimant?', draft.howMuchIsPaid.amount | numeral, paths.defendantHowMuchPaid.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('When did you pay this amount?', draft.howMuchIsPaid.date.toMoment() | date, paths.defendantHowMuchPaid.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('Explain why you don’t owe the full amount', draft.howMuchIsPaid.text, paths.defendantHowMuchPaid.evaluateUri({ externalId: claim.externalId })) }}
      {% endif %}

      {% set atLeastOneRow = false %}
      {% set timelineCode = '<ul>' %}
      {% for row in draft.timeline.rows %}
        {% if row.date %}
          {% set atLeastOneRow = true %}
          {% set timelineCode = timelineCode + '<li><div class="bold">' + row.date + '</div>' + row.description + ' </li>' %}
        {% endif %}
      {% endfor %}
      {% set timelineCode = timelineCode+ '</ul>' %}

      {% if atLeastOneRow === false %}
        {% set timelineCode = '-' %}
      {% endif %}
      {{ row('Your timeline of events (optional)', timelineCode | safe, paths.timelinePage.evaluateUri({ externalId: claim.externalId })) }}

      {% set atLeastOneRow = false %}
      {% set evidenceCode = '<ul>' %}
      {% for row in draft.evidence.rows %}
        {% if row.type %}
          {% set atLeastOneRow = true %}
          {% set evidenceCode = evidenceCode + '<li><div class="bold">' + row.type.displayValue + '</div>' + row.description | default('') + ' </li>' %}
        {% endif %}
      {% endfor %}
      {% set evidenceCode = evidenceCode + '</ul>' %}

      {% if atLeastOneRow === false %}
        {% set evidenceCode = '-' %}
      {% endif %}
      {{ row('Your evidence (optional)', evidenceCode | safe, paths.evidencePage.evaluateUri({ externalId: claim.externalId })) }}

      {% if draft.isResponseRejectedPartially() %}
        {% if draft.impactOfDispute.text and draft.impactOfDispute.text.trim() %}
          {% set impactOfDisputeText = draft.impactOfDispute.text %}
        {% else %}
          {% set impactOfDisputeText = '-' %}
        {% endif %}
        {{ row('How this dispute has affected you (optional)', impactOfDisputeText, paths.impactOfDisputePage.evaluateUri({ externalId: claim.externalId })) }}
      {% endif %}

      {% if draft.requireDefence() %}
        {{ row('Your defence', draft.defence.text, paths.defencePage.evaluateUri({ externalId: claim.externalId })) }}
      {% endif %}

      {{ tableEnd() }}

    {% endif %}

    {% if draft.isResponseFullyAdmitted() or draft.isResponsePartiallyRejectedDueTo(RejectPartOfClaimOption.AMOUNT_TOO_HIGH) %}
      {% if draft.defendantPaymentOption.isOfType(DefendantPaymentType.INSTALMENTS) %}
        {{ tableStart('whenWillYouPay', 'When will you pay?') }}
        {{ row('When will you pay', t(draft.defendantPaymentOption.option.displayValueFor(draft.responseType)) | capitalize, paths.defencePaymentOptionsPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('The first payment of', t(draft.defendantPaymentPlan.firstPayment | numeral), paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('Followed by equal instalments of', t(draft.defendantPaymentPlan.instalmentAmount | numeral), paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('Make the first payment on', t(draft.defendantPaymentPlan.firstPaymentDate.toMoment() | date), paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('Frequency of payments', t(draft.defendantPaymentPlan.paymentSchedule.displayValue), paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('Explain why you can’t pay the full amount now', draft.defendantPaymentPlan.text, paths.defencePaymentPlanPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ tableEnd() }}
      {% endif %}
      {% if draft.defendantPaymentOption.isOfType(DefendantPaymentType.BY_SET_DATE) %}
        {{ tableStart('whenWillYouPay', 'When will you pay?') }}
        {{ row('When will you pay', t(draft.defendantPaymentOption.option.displayValueFor(draft.response.type)) | capitalize, paths.defencePaymentOptionsPage.evaluateUri({ externalId: claim.externalId })) }}
        {{ row('When you’ll pay the amount', draft.payBySetDate.paymentDate.date.toMoment() | date, payBySetDatePaths.paymentDatePage.evaluateUri({ externalId: claim.externalId }), bottomBorder = (not draft.payBySetDate.hasExplanation())) }}
        {% if draft.payBySetDate.hasExplanation() %}
          {{ row('Explain why you can’t pay immediately', draft.payBySetDate.explanation.text, payBySetDatePaths.explanationPage.evaluateUri({ externalId: claim.externalId })) }}
        {% endif %}
        {{ tableEnd() }}
      {% endif %}
    {% endif %}

    {% if draft.requireMediation() %}
      {{ tableStart('freeMediation', 'Free mediation') }}
      {{ row('Free mediation', t(draft.freeMediation.option) | capitalize, paths.freeMediationPage.evaluateUri({ externalId: claim.externalId })) }}
      {{ tableEnd() }}
    {% endif %}

    {{
      statementOfTruth(
        form,
        label = 'I believe that the facts stated in this claim are true',
        isQualified = (signatureType === SignatureType.QUALIFIED)
      )
    }}

    {{ submitButton('Submit response') }}

    <input type="hidden" name="type" value="{{ form.model.type }}">
  </form>
{% endblock %}
