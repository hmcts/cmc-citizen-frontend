import { CompletableTask } from 'models/task'
import {
  ValidationErrors as DefaultValidationErrors,
  ValidationErrors as GlobalValidationErrors
} from 'forms/validation/validationErrors'
import { IsDefined, IsIn, IsNotEmpty, MaxLength, ValidateIf } from '@hmcts/class-validator'
import { YesNoOption } from 'models/yesNoOption'
import { ValidationConstraints } from 'forms/validation/validationConstraints'

export class ValidationErrors {
  static readonly REASON_REQUIRED: string = 'Question 2: If you have answered “yes” to question 1, in what way/s are you/ the witness vulnerable and what steps, support or adjustments do you wish the Court to consider?'
}

export class VulnerabilityQuestions implements CompletableTask {

  @IsDefined({ message: GlobalValidationErrors.YES_NO_REQUIRED })
  @IsIn(YesNoOption.all(), { message: GlobalValidationErrors.YES_NO_REQUIRED })
  vulnerabilityQuestions?: YesNoOption

  @ValidateIf(o => o.vulnerabilityQuestions && o.vulnerabilityQuestions.option === YesNoOption.YES.option)
  @IsNotEmpty({ message: ValidationErrors.REASON_REQUIRED })
  @IsDefined({ message: ValidationErrors.REASON_REQUIRED })
  @MaxLength(ValidationConstraints.STANDARD_TEXT_INPUT_MAX_LENGTH, { message: DefaultValidationErrors.TEXT_TOO_LONG })
  vulnerabilityDetails?: string

  constructor (vulnerabilityQuestions?: YesNoOption, vulnerabilityDetails?: string) {
    this.vulnerabilityQuestions = vulnerabilityQuestions
    this.vulnerabilityDetails = vulnerabilityDetails
  }

  static fromObject (input: any): VulnerabilityQuestions {
    if (!input) {
      return input
    }

    return new VulnerabilityQuestions(YesNoOption.fromObject(input.vulnerabilityQuestions), input.vulnerabilityDetails)
  }

  deserialize (input: any): VulnerabilityQuestions {
    if (input && input.vulnerabilityQuestions) {
      this.vulnerabilityQuestions = YesNoOption.fromObject(input.vulnerabilityQuestions.option)
      if (this.vulnerabilityQuestions === YesNoOption.NO) {
        this.vulnerabilityDetails = ' '
      } else {
        this.vulnerabilityDetails = input.vulnerabilityDetails
      }
    }

    return this
  }

  isCompleted (): boolean {
    if (!this.vulnerabilityQuestions) {
      return false
    } else if (this.vulnerabilityQuestions === YesNoOption.YES) {
      return this.vulnerabilityDetails !== undefined
    } else {
      return true
    }
  }
}
