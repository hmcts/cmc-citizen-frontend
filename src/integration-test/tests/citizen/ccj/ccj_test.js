"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const party_type_1 = require("integration-test/data/party-type");
const interest_type_1 = require("integration-test/data/interest-type");
const test_data_1 = require("integration-test/data/test-data");
const ccj_1 = require("integration-test/tests/citizen/ccj/steps/ccj");
const user_1 = require("integration-test/tests/citizen/home/steps/user");
const userSteps = new user_1.UserSteps();
const ccjSteps = new ccj_1.CountyCourtJudgementSteps();
Feature('CCJ');
Scenario('Request judgment as an individual with no defendant email and pay by instalments @citizen @quick', { retries: 3 }, async (I) => {
    const email = userSteps.getClaimantEmail();
    const claimantType = party_type_1.PartyType.INDIVIDUAL;
    const defendantType = party_type_1.PartyType.INDIVIDUAL;
    const hasDefendantEmail = false;
    const claimData = test_data_1.createClaimData(claimantType, defendantType, hasDefendantEmail, interest_type_1.InterestType.NO_INTEREST);
    const claimRef = await I.createClaim(claimData, email);
    userSteps.login(email);
    ccjSteps.requestCCJ(claimRef, defendantType);
    ccjSteps.ccjDefendantToPayByInstalments();
    ccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);
    I.see('County Court Judgment requested', 'h1.bold-large');
});
Scenario('Request judgment as a Company, pay by set date @nightly', { retries: 3 }, async (I) => {
    const email = userSteps.getClaimantEmail();
    const claimantType = party_type_1.PartyType.COMPANY;
    const defendantType = party_type_1.PartyType.COMPANY;
    const claimData = test_data_1.createClaimData(claimantType, defendantType, true, interest_type_1.InterestType.NO_INTEREST);
    const claimRef = await I.createClaim(claimData, email);
    userSteps.login(email);
    ccjSteps.requestCCJ(claimRef, defendantType);
    ccjSteps.ccjDefendantToPayBySetDate();
    ccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);
    I.see('County Court Judgment requested', 'h1.bold-large');
});
Scenario('Request judgment as a sole trader, pay immediately @nightly', { retries: 3 }, async (I) => {
    const email = userSteps.getClaimantEmail();
    const claimantType = party_type_1.PartyType.SOLE_TRADER;
    const defendantType = party_type_1.PartyType.ORGANISATION;
    const claimData = test_data_1.createClaimData(claimantType, defendantType, true, interest_type_1.InterestType.NO_INTEREST);
    const claimRef = await I.createClaim(claimData, email);
    userSteps.login(email);
    ccjSteps.requestCCJ(claimRef, defendantType);
    ccjSteps.ccjDefendantToPayImmediately();
    ccjSteps.checkCCJFactsAreTrueAndSubmit(claimantType, claimData.defendants[0], defendantType);
    I.see('County Court Judgment requested', 'h1.bold-large');
});
