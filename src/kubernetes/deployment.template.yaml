#
# CMC-FRONTEND
#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citizen-frontend
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: citizen-frontend
  template:
    metadata:
      labels:
        app: citizen-frontend
    spec:
      dnsConfig:
        options:
        - name: single-request-reopen
      containers:
      - image: ${IMAGE_NAME}
        name: citizen-frontend
        env:
        - name: REFORM_TEAM
          value: 'cmc'
        - name: REFORM_SERVICE_NAME
          value: 'citizen-frontend'
        - name: NODE_ENV
          value: 'production'
        - name: UV_THREADPOOL_SIZE
          value: '64'
        - name: GA_TRACKING_ID
          value: 'UA-97111056-1'
        - name: SERVICE_SURVEY_URL
          value: 'http://www.smartsurvey.co.uk/s/CMCMVPT1/'
        - name: FEEDBACK_SURVEY_URL
          value: 'http://www.smartsurvey.co.uk/s/CMCMVPFB/'
        - name: REPORT_PROBLEM_SURVEY_URL
          value: 'http://www.smartsurvey.co.uk/s/CMCMVPPB/'
        - name: DRAFT_STORE_URL
          value: 'http://draft-store-api:8800'
        - name: PDF_SERVICE_URL
          value: 'http://pdf-service-api:5500'
        - name: CLAIM_STORE_URL
          value: 'http://claim-store-api:4400'
        - name: FEATURE_TOGGLES_API_URL
          value: 'http://feature-toggle-api:8580'
        - name: FEATURE_TESTING_SUPPORT
          value: 'true'
        - name: FEATURE_NEW_FEATURES_CONSENT
          value: 'true'
        - name: FEATURE_ADMISSIONS
          value: 'true'
        - name: FEATURE_FINE_PRINT
          value: 'true'
        - name: FEATURE_RETURN_ERROR_TO_USER
          value: 'true'
        - name: FEATURE_MOCK_PAY
          value: 'false'
        - name: POSTCODE_LOOKUP_API_KEY
          value: ${POSTCODE_LOOKUP_API_KEY}
        - name: APPINSIGHTS_INSTRUMENTATIONKEY
          value: ${APPINSIGHTS_INSTRUMENTATIONKEY}
        - name: OAUTH_CLIENT_SECRET
          value: ${OAUTH_CLIENT_SECRET}
        - name: IDAM_S2S_TOTP_SECRET
          value: ${IDAM_S2S_TOTP_SECRET}
        - name: DRAFT_STORE_SECRET_PRIMARY
          value: ${DRAFT_STORE_SECRET_PRIMARY}
        - name: DRAFT_STORE_SECRET_SECONDARY
          value: ${DRAFT_STORE_SECRET_SECONDARY}
        - name: COOKIE_ENCRYPTION_KEY
          value: ${COOKIE_ENCRYPTION_KEY}
        - name: CONTACT_EMAIL
          value: ${CONTACT_EMAIL}
        envFrom:
        - configMapRef:
            name: aat-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.2"
          limits:
            memory: "512Mi"
            cpu: "1"
        ports:
        - containerPort: 3000
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: citizen-frontend
  namespace: ${NAMESPACE}
  labels:
    app: citizen-frontend
spec:
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 3000
  selector:
    app: citizen-frontend
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: citizen-frontend
  namespace: ${NAMESPACE}
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: ${SERVICE_FQDN}
    http:
      paths:
      - path: /
        backend:
          serviceName: citizen-frontend
          servicePort: 80
---
#
# FEATURE-TOGGLES
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-toggle-api
  namespace: ${NAMESPACE}
data:
  JAVA_OPTS: -Xms8m -Xmx256m -Djava.security.egd=file:/dev/./urandom -XX:MaxMetaspaceSize=128m
  APPINSIGHTS_INSTRUMENTATIONKEY: 'fake-key'
  FLYWAY_ENABLED: 'true'
  FLYWAY_NOOP_STRATEGY: 'false'
  FEATURES_DB_HOST: 'shared-database'
  FEATURES_DB_CONN_OPTIONS: ''
  FEATURES_DB_USER_NAME: 'features'
  FEATURES_DB_PASSWORD: 'features'
  TEST_ADMIN_USERNAME: 'admin@example.com'
  TEST_ADMIN_PASSWORD: 'Password12'
  TEST_EDITOR_USERNAME: 'editor@example.com'
  TEST_EDITOR_PASSWORD: 'Password12'
  LOGBACK_REQUIRE_THREAD: 'false'
  LOGBACK_REQUIRE_ALERT_LEVEL: 'false'
  LOGBACK_REQUIRE_ERROR_CODE: 'false'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feature-toggle-api
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: feature-toggle-api
  template:
    metadata:
      labels:
        app: feature-toggle-api
    spec:
      containers:
      - image: hmcts/feature-toggle-api
        name: feature-toggle-api
        envFrom:
        - configMapRef:
            name: feature-toggle-api
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"
        ports:
        - containerPort: 8580
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: feature-toggle-api
  namespace: ${NAMESPACE}
  labels:
    app: feature-toggle-api
spec:
  ports:
  - port: 8580
  selector:
    app: feature-toggle-api
  clusterIP: None
---
apiVersion: batch/v1
kind: Job
metadata:
  name: feature-toggle-importer
  namespace: ${NAMESPACE}
spec:
  template:
    metadata:
      labels:
        app: feature-toggle-importer
    spec:
      initContainers:
      - name: init-wait-feature-toggle-api
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 feature-toggle-api 8580 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - image: hmcts/cmc-feature-toggle-importer
        name: feature-toggle-importer
        imagePullPolicy: Always
        env:
        - name: WAIT_HOSTS
          value: 'feature-toggle-api:8580'
        - name: VERBOSE
          value: 'true'
        - name: WAIT_HOSTS_TIMEOUT
          value: '300'
      restartPolicy: Never
  backoffLimit: 4
---
#
# SMTP-SERVER
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smtp-server
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smtp-server
  template:
    metadata:
      labels:
        app: smtp-server
    spec:
      containers:
      - image: mailhog/mailhog
        name: smtp-server
        resources:
          requests:
            memory: "64Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
        ports:
        - containerPort: 1025
          name: smtp
        - containerPort: 8025
          name: smtp-ui
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: smtp-server
  namespace: ${NAMESPACE}
  labels:
    app: smtp-server
spec:
  ports:
  - port: 1025
  selector:
    app: smtp-server
  clusterIP: None
---
#
# CLAIM-STORE
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: claim-store-api
  namespace: ${NAMESPACE}
data:
  JAVA_OPTS: '-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom -XX:MaxMetaspaceSize=128m'
  CMC_DB_HOST: 'shared-database'
  CMC_DB_PORT: '5432'
  CMC_DB_USERNAME: 'cmc'
  CMC_DB_PASSWORD: 'cmc'
  CLAIM_STORE_DB_HOST: 'shared-database'
  CLAIM_STORE_DB_PORT: '5432'
  CLAIM_STORE_DB_USERNAME: 'claimstore'
  CLAIM_STORE_DB_PASSWORD: 'claimstore'
  FRONTEND_BASE_URL: 'https://${SERVICE_FQDN}'
  CLAIM_STORE_TEST_SUPPORT_ENABLED: 'true'
  STAFF_NOTIFICATIONS_SENDER: 'no-reply@example.com'
  STAFF_NOTIFICATIONS_RECIPIENT: 'civilmoneyclaims+staff-int-tests@gmail.com'
  RPA_NOTIFICATIONS_SENDER: 'no-reply@example.com'
  RPA_NOTIFICATIONS_SEALEDCLAIMRECIPIENT: 'civilmoneyclaims+rpa-claim-issued@gmail.com'
  RPA_NOTIFICATIONS_MORETIMEREQUESTEDRECIPIENT: 'civilmoneyclaims+rpa-more-time-requested@gmail.com'
  RPA_NOTIFICATIONS_RESPONSERECIPIENT: 'civilmoneyclaims+rpa-defence-response@gmail.com'
  RPA_NOTIFICATIONS_COUNTYCOURTJUDGEMENTRECIPIENT: 'civilmoneyclaims+rpa-county-court-judgement@gmail.com'
  SPRING_MAIL_HOST: 'smtp-server'
  SPRING_MAIL_PORT: '1025'
  DOCUMENT_MANAGEMENT_URL: 'false'
  CORE_CASE_DATA_API_URL: 'false'
  FEATURE_TOGGLE_CORE_CASE_DATA: 'true'
  ROOT_APPENDER: 'CMC'
  REFORM_SERVICE_NAME: 'claim-store'
  REFORM_TEAM: 'cmc'
  REFORM_ENVIRONMENT: 'preview'
  IDAM_CASEWORKER_ANONYMOUS_USERNAME: 'civilmoneyclaims+anonymouscitizen@gmail.com'
  IDAM_CASEWORKER_ANONYMOUS_PASSWORD: 'Password12'
  IDAM_CASEWORKER_SYSTEM_USERNAME: 'civilmoneyclaims+systemupdate@gmail.com'
  IDAM_CASEWORKER_SYSTEM_PASSWORD: 'Password12'
  SEND_LETTER_URL: 'false'
  APPINSIGHTS_INSTRUMENTATIONKEY: 'fake-key'
  OAUTH2_CLIENT_SECRET: '${OAUTH_CLIENT_SECRET}'
  FEATURE_TOGGLES_API_URL: 'http://feature-toggle-api:8580'
  RESPOND_TO_CLAIM_URL: 'https://${SERVICE_FQDN}/first-contact/start'
  GOV_NOTIFY_API_KEY: '${GOV_NOTIFY_API_KEY}'
  PDF_SERVICE_URL: 'http://pdf-service-api:5500'
  IDAM_S2S_AUTH_TOTP_SECRET: '${CLAIM_STORE_S2S_SECRET}'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claim-store-api
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: claim-store-api
  template:
    metadata:
      labels:
        app: claim-store-api
    spec:
      initContainers:
      - name: init-wait-db
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 shared-database 5432 && exit 0 || sleep 3; done; exit 1"]
      - name: init-wait-smtp
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 smtp-server 1025 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - image: hmcts/cmc-claim-store
        name: claim-store-api
        envFrom:
        - configMapRef:
            name: claim-store-api
        - configMapRef:
            name: aat-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"
        ports:
        - containerPort: 4400
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: claim-store-api
  namespace: ${NAMESPACE}
  labels:
    app: claim-store-api
spec:
  ports:
  - port: 4400
  selector:
    app: claim-store-api
  clusterIP: None
---
#
# SHARED-DATABASE
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shared-database-initdb
  namespace: ${NAMESPACE}
data:
  initdb.sql: |
    CREATE USER features WITH PASSWORD 'features';
    CREATE DATABASE features WITH OWNER = features ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE USER claimstore WITH PASSWORD 'claimstore';
    CREATE DATABASE claimstore WITH OWNER = claimstore ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE USER cmc WITH PASSWORD 'cmc';
    CREATE DATABASE cmc WITH OWNER = cmc ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE USER draftstore WITH PASSWORD 'draftstore';
    CREATE DATABASE draftstore WITH OWNER = draftstore ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE USER idam WITH PASSWORD 'idam';
    CREATE DATABASE idam WITH OWNER = idam ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shared-database
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shared-database
  template:
    metadata:
      labels:
        app: shared-database
    spec:
      containers:
      - image: postgres:10.5-alpine
        name: shared-database
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "1000m"
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d
          name: initdb
          readOnly: true
      volumes:
      - name: initdb
        configMap:
          name: shared-database-initdb
---
apiVersion: v1
kind: Service
metadata:
  name: shared-database
  namespace: ${NAMESPACE}
  labels:
    app: shared-database
spec:
  ports:
  - port: 5432
  selector:
    app: shared-database
  clusterIP: None
---
#
# DRAFT-STORE
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: draft-store-api
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: draft-store-api
  template:
    metadata:
      labels:
        app: draft-store-api
    spec:
      initContainers:
      - name: init-wait-db
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 shared-database 5432 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - image: docker.artifactory.reform.hmcts.net/reform/draft-store-api
        name: draft-store-api
        env:
        - name: JAVA_OPTS
          value: '-Xms8m -Xmx256m -Djava.security.egd=file:/dev/./urandom -XX:MaxMetaspaceSize=128m'
        - name: ROOT_APPENDER
          value: 'CONSOLE'
        - name: DRAFT_STORE_DB_HOST
          value: 'shared-database'
        - name: DRAFT_STORE_DB_PASSWORD
          value: 'draftstore'
        envFrom:
        - configMapRef:
            name: aat-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"
        ports:
        - containerPort: 8800
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: draft-store-api
  namespace: ${NAMESPACE}
  labels:
    app: draft-store-api
spec:
  ports:
  - port: 8800
  selector:
    app: draft-store-api
  clusterIP: None
---
#
# PDF-SERVICE
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pdf-service-api
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pdf-service-api
  template:
    metadata:
      labels:
        app: pdf-service-api
    spec:
      initContainers:
      - name: init-wait-db
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 shared-database 5432 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - image: docker.artifactory.reform.hmcts.net/reform/pdf-service-api
        name: pdf-service-api
        env:
        - name: JAVA_OPTS
          value: '-Xms8m -Xmx256m -Djava.security.egd=file:/dev/./urandom -XX:MaxMetaspaceSize=128m'
        - name: ROOT_APPENDER
          value: 'CONSOLE'
        - name: REFORM_SERVICE_NAME
          value: 'pdf-service'
        - name: REFORM_TEAM
          value: 'cmc'
        - name: REFORM_ENVIRONMENT
          value: 'preview'
        envFrom:
        - configMapRef:
            name: aat-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"
        ports:
        - containerPort: 5500
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: pdf-service-api
  namespace: ${NAMESPACE}
  labels:
    app: pdf-service-api
spec:
  ports:
  - port: 5500
  selector:
    app: pdf-service-api
  clusterIP: None
---
#
# IDAM-AUTHENTICATION-WEB
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: idam-authentication-web
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: idam-authentication-web
  template:
    metadata:
      labels:
        app: idam-authentication-web
    spec:
      containers:
      - image: docker.artifactory.reform.hmcts.net/auth/authentication-web:latest
        name: idam-authentication-web
        env:
        - name: IDAM_API_URL
          value: 'http://idam-api'
        - name: IDAM_API_OAUTH2_CLIENT_CLIENT_SECRETS_BULK_SCAN_ORCHESTRATOR
          value: '123456'
        - name: IDAM_API_OAUTH2_CLIENT_CLIENT_SECRETS_CCD_GATEWAY
          value: '123456'
        - name: IDAM_CONTINUE_URL_VALIDATOR_ENFORCE_TLS
          value: 'false'
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "1000m"
        ports:
        - containerPort: 8000
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: idam-authentication-web
  namespace: ${NAMESPACE}
  labels:
    app: idam-authentication-web
spec:
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8000
  selector:
    app: idam-authentication-web
---
#
# IDAM-API
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: idam-api
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: idam-api
  template:
    metadata:
      labels:
        app: idam-api
    spec:
      initContainers:
      - name: init-wait-db
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 shared-database 5432 && exit 0 || sleep 3; done; exit 1"]
      - name: init-wait-smtp
        image: alpine
        command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 smtp-server 1025 && exit 0 || sleep 3; done; exit 1"]
      containers:
      - image: docker.artifactory.reform.hmcts.net/auth/idam-api
        name: idam-api
        env:
        - name: IDAM_SUPERUSER_EMAIL
          value: 'cmc-int-test@cmc.reform.hmcts.net'
        - name: SPRING_DATASOURCE_URL
          value: 'jdbc:postgresql://shared-database:5432/idam'
        - name: IDAM_TESTING_SUPPORT_ENABLED
          value: 'true'
        - name: NOTIFY_API_KEY
          value: '${GOV_NOTIFY_API_KEY}'
        - name: NOTIFY_CMC_ACTIVATE_USER_TEMPLATE
          value: '76aa8695-64e8-4afd-ae13-bc8385302b1f'
        - name: NOTIFY_CMC_SOLICITOR_ACTIVATE_USER_TEMPLATE
          value: '76aa8695-64e8-4afd-ae13-bc8385302b1f'
        - name: IDAM_SECRET
          value: 'cmc_it_test_secret_key'
        - name: NOTIFY
          value: 'true'
        - name: NOTIFY_CMC_WELCOME_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_DIVORCE_WELCOME_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_SSCS_WELCOME_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_RESET_PASSWORD_TEMPLATE
          value: 'fake'
        - name: NOTIFY_PROBATE_ACTIVATE_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_DIVORCE_ACTIVATE_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_SSCS_ACTIVATE_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_CCD_ACTIVATE_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_BAR_ACTIVATE_USER_TEMPLATE
          value: 'fake'
        - name: NOTIFY_FREG_ACTIVATE_USER_TEMPLATE
          value: 'fake'
        - name: IDAM_API_OAUTH2_CLIENT_CLIENT_SECRETS_CMC_CITIZEN
          value: '123456'
        - name: IDAM_API_OAUTH2_CLIENT_CLIENT_SECRETS_CMC_LEGAL
          value: '123456'
        - name: IDAM_API_OAUTH2_CLIENT_CLIENT_SECRETS_CCD_GATEWAY
          value: '123456'
        - name: REFORM_ENVIRONMENT
          value: 'preview'
        - name: IDAM_CMC_ANONYMOUSCITIZEN_USER
          value: 'civilmoneyclaims+anonymouscitizen@gmail.com'
        - name: IDAM_CMC_ANONYMOUSCITIZEN_PASSWORD
            value: 'Password12'
        - name: IDAM_CMC_SYSTEMUPDATE_USER
            value: 'civilmoneyclaims+systemupdate@gmail.com'
        - name: IDAM_CMC_SYSTEMUPDATE_PASSWORD
            value: 'Password12'
        - name: IDAM_CMC_URL
            value: '${SERVICE_FQDN}'
        - name: IDAM_CMC_WHITELIST
            value: '${SERVICE_FQDN}/receiver;'
        - name: IDAM_CMC_SOLICITOR_WHITELIST
            value: ''
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2000m"
        ports:
        - containerPort: 8080
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: idam-api
  namespace: ${NAMESPACE}
  labels:
    app: idam-api
spec:
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  selector:
    app: idam-api
---
#
# SERVICE-AUTH-PROVIDER-API
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-auth-provider-api
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-auth-provider-api
  template:
    metadata:
      labels:
        app: service-auth-provider-api
    spec:
      containers:
      - image: hmcts/service-auth-provider-app
        name: service-auth-provider-api
        env:
        - name: SERVER_PORT
          value: '8080'
        - name: JAVA_OPTS
          value: '-Xms128m -Xmx768m -Djava.security.egd=file:/dev/./urandom -XX:MaxMetaspaceSize=128m'
        - name: JWT_KEY
          value: 'wThK0f0/lh3FlxFcL4xUWDMI5C1J9KyQBgXV4wseh1e5J1uYJIjvTvArHxQDrYoHJ23xFxjHkOnvNbR5dXRoxA=='
        - name: MICROSERVICE_KEYS_BULK_SCAN_ORCHESTRATOR
          value: 'AAAAAAAAAAAAAAAA'
        - name: MICROSERVICE_KEYS_EM_GW
          value: 'AAAAAAAAAAAAAAAA'
        - name: MICROSERVICE_KEYS_CCD_DATA
          value: 'AAAAAAAAAAAAAAAA'
        - name: MICROSERVICE_KEYS_CCD_DEFINITION
          value: 'AAAAAAAAAAAAAAAA'
        - name: MICROSERVICE_KEYS_CCD_GW
          value: 'AAAAAAAAAAAAAAAA'
        - name: TESTING_SUPPORT_ENABLED
          value: 'true'
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"
        ports:
        - containerPort: 8080
          name: http
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: service-auth-provider-api
  namespace: ${NAMESPACE}
  labels:
    app: service-auth-provider-api
spec:
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  selector:
    app: service-auth-provider-api
