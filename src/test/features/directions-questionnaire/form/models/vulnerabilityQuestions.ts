/* Allow chai assertions which don't end in a function call, e.g. expect(thing).to.be.undefined */
/* tslint:disable:no-unused-expression */

import { expect } from 'chai'
import { Validator } from '@hmcts/class-validator'
import { VulnerabilityQuestions, ValidationErrors } from 'directions-questionnaire/forms/models/vulnerabilityQuestions'
import { expectValidationError } from 'test/app/forms/models/validationUtils'
import { ValidationErrors as GlobalValidationErrors } from 'forms/validation/validationErrors'
import { YesNoOption } from 'models/yesNoOption'

describe('VulnerabilityQuestions', () => {
  describe('validation', () => {
    const validator: Validator = new Validator()

    it('should reject when null', () => {
      const errors = validator.validateSync(new VulnerabilityQuestions(null, null))

      expect(errors).to.not.be.empty
      expectValidationError(errors, GlobalValidationErrors.YES_NO_REQUIRED)
    })

    it('should reject with no vulnerability questions option', () => {
      const errors = validator.validateSync(new VulnerabilityQuestions())

      expect(errors).to.not.be.empty
      expectValidationError(errors, GlobalValidationErrors.YES_NO_REQUIRED)
    })

    it('should reject vulnerability questions with yes option and no vulnerability details', () => {
      const errors = validator.validateSync(new VulnerabilityQuestions(YesNoOption.YES))

      expect(errors).to.not.be.empty
      expectValidationError(errors, ValidationErrors.REASON_REQUIRED)
    })

    it('should accept vulnerability questions with option and what to expect reason', () => {
      const errors = validator.validateSync(new VulnerabilityQuestions(YesNoOption.YES, 'vulnerability details'))

      expect(errors).to.be.empty
    })
  })

  describe('deserialize', () => {
    it('should return an instance initialised with defaults for undefined', () => {
      expect(new VulnerabilityQuestions().deserialize(undefined)).to.deep.equal(new VulnerabilityQuestions())
    })

    it('should deserialize vulnerability questions to return instance of vulnerability questions', () => {
      const vulnerabilityQuestions: VulnerabilityQuestions = new VulnerabilityQuestions(YesNoOption.YES, 'vulnerability details')

      expect(vulnerabilityQuestions.deserialize(vulnerabilityQuestions)).to.be.instanceOf(VulnerabilityQuestions)
    })
  })

  describe('fromObject should return', () => {

    it('undefined when undefined provided', () => {
      const model = VulnerabilityQuestions.fromObject(undefined)

      expect(model).to.be.eq(undefined)
    })

    it('empty object when unknown value provided', () => {
      const model = VulnerabilityQuestions.fromObject({ otherWitnesses: 'I do not know this value!' })

      expect(model.vulnerabilityQuestions).to.be.eq(undefined)
    })

    it(`valid object when values provided`, () => {
      const model = VulnerabilityQuestions.fromObject({ vulnerabilityQuestions: 'yes' })
      expect(model.vulnerabilityQuestions).to.be.eq(YesNoOption.YES)
    })
  })

  describe('isCompleted', () => {
    it('should be marked not completed when no option is present', () => {
      const vulnerabilityQuestions: VulnerabilityQuestions = new VulnerabilityQuestions(undefined)

      expect(vulnerabilityQuestions.isCompleted()).to.be.false
    })

    it('should be marked complete when no option is selected', () => {
      const vulnerabilityQuestions: VulnerabilityQuestions = new VulnerabilityQuestions(YesNoOption.NO)

      expect(vulnerabilityQuestions.isCompleted()).to.be.true
    })

    it('Should be marked not complete when the yes option is selected and nothing is entered', () => {
      const vulnerabilityQuestions: VulnerabilityQuestions = new VulnerabilityQuestions(YesNoOption.YES)

      expect(vulnerabilityQuestions.isCompleted()).to.be.false
    })

    it('Should be marked complete when the yes option is selected and vulnerability detail is present', () => {
      const vulnerabilityQuestions: VulnerabilityQuestions = new VulnerabilityQuestions(YesNoOption.YES, 'vulnerable')
      expect(vulnerabilityQuestions.isCompleted()).to.be.true
    })

  })
})
